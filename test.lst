     1                                  extern ExitProcess, GetStdHandle, WriteConsoleA
     2                                  global start
     3                                  %include "invoke.inc"
     1                              <1> %macro invoke 1-*
     2                              <1> 	%define _func %1
     3                              <1> 	%rep %0-1
     4                              <1> 		%rotate -1
     5                              <1> 		push %1
     6                              <1> 	%endrep
     7                              <1> 	call _func
     8                              <1> %endmacro
     4                                  
     5                                  
     6                                  
     7                                  section .data
     8                                  	STD_OUTPUT_HANDLE equ -11
     9                                  	year1 equ 1800
    10                                  	year2 equ 2020
    11                                  	
    12                                  	 struc list_t
    13 00000000 <res 00000020>          		author: resb 32
    14 00000020 <res 00000020>          		bookname: resb 32
    15 00000040 <res 00000002>          		year: resw 1
    16 00000042 <res 00000004>          		next: resd 1
    17                                  	endstruc
    18                                  	
    19                                  	head: istruc list_t
    20 00000000 566173696C69792050-     		at author, db "Vasiliy Pushkin"
    20 00000009 7573686B696E       
    21 0000000F 00<rept>416E647265-     		at bookname, db "Andrew Black"
    21 00000025 7720426C61636B     
    22 0000002C 00<rept>BE07            		at year, dw 1982
    23 00000042 [46000000]              		at next, dd test2
    24                                  	iend
    25                                  	
    26                                  	test2: istruc list_t
    27 00000046 00                      		at author, db 0
    28 00000047 00<rept>00              		at bookname, db 0
    29 00000067 00<rept>CF07            		at year, dw 1999
    30 00000088 [8C000000]              		at next, dd test3
    31                                  	iend
    32                                  	
    33                                  	test3: istruc list_t
    34 0000008C 486172756B69204D75-     		at author, db "Haruki Murakami"
    34 00000095 72616B616D69       
    35 0000009B 00<rept>4E656A696D-     		at bookname, db "Nejimaki Tori Kuronikuru"
    35 000000B1 616B6920546F726920-
    35 000000BA 4B75726F6E696B7572-
    35 000000C3 75                 
    36 000000C4 00<rept>D007            		at year, dw 2000
    37 000000CE [D2000000]              		at next, dd test4
    38                                  	iend
    39                                  	
    40                                  	test4: istruc list_t
    41 000000D2 486172756B69204D75-     		at author, db "Haruki Murakami"
    41 000000DB 72616B616D69       
    42 000000E1 00<rept>31513834        		at bookname, db "1Q84"
    43 000000F6 00<rept>C800            		at year, dw 200
    44 00000114 00000000                		at next, dd 0
    45                                  	iend
    46                                  	
    47 00000118 0A                      	newline db 10
    48                                  	
    49                                  	
    50                                  section .code
    51                                  start:
    52                                  	;call out_list
    53 00000000 E86B000000              	call search_delete
    54 00000005 E807000000              	call out_list
    55                                  	invoke ExitProcess, 0
    55                              <1>  %define _func %1
    55                              <1>  %rep %0-1
    55                              <1>  %rotate -1
    55                              <1>  push %1
    55                              <1>  %endrep
    55                              <2>  %rotate -1
    55 0000000A 6A00                <2>  push %1
    55 0000000C E8(00000000)        <1>  call _func
    56                                  	
    57                                  out_list:
    58 00000011 50                      	push eax
    59 00000012 53                      	push ebx
    60                                  	invoke GetStdHandle, STD_OUTPUT_HANDLE
    60                              <1>  %define _func %1
    60                              <1>  %rep %0-1
    60                              <1>  %rotate -1
    60                              <1>  push %1
    60                              <1>  %endrep
    60                              <2>  %rotate -1
    60 00000013 6AF5                <2>  push %1
    60 00000015 E8(00000000)        <1>  call _func
    61 0000001A 89C3                    	mov ebx, eax
    62 0000001C BE[00000000]            	mov esi, head
    63                                  	.cycle:
    64                                  		invoke WriteConsoleA, ebx, esi+author, 32, 0, 0
    64                              <1>  %define _func %1
    64                              <1>  %rep %0-1
    64                              <1>  %rotate -1
    64                              <1>  push %1
    64                              <1>  %endrep
    64                              <2>  %rotate -1
    64 00000021 6A00                <2>  push %1
    64                              <2>  %rotate -1
    64 00000023 6A00                <2>  push %1
    64                              <2>  %rotate -1
    64 00000025 6A20                <2>  push %1
    64                              <2>  %rotate -1
    64 00000027 56                  <2>  push %1
    64                              <2>  %rotate -1
    64 00000028 53                  <2>  push %1
    64 00000029 E8(00000000)        <1>  call _func
    65                                  		invoke WriteConsoleA, ebx, newline, 1, 0, 0
    65                              <1>  %define _func %1
    65                              <1>  %rep %0-1
    65                              <1>  %rotate -1
    65                              <1>  push %1
    65                              <1>  %endrep
    65                              <2>  %rotate -1
    65 0000002E 6A00                <2>  push %1
    65                              <2>  %rotate -1
    65 00000030 6A00                <2>  push %1
    65                              <2>  %rotate -1
    65 00000032 6A01                <2>  push %1
    65                              <2>  %rotate -1
    65 00000034 68[18010000]        <2>  push %1
    65                              <2>  %rotate -1
    65 00000039 53                  <2>  push %1
    65 0000003A E8(00000000)        <1>  call _func
    66 0000003F 83C620                  		add esi, bookname
    67                                  		invoke WriteConsoleA, ebx, esi, 32, 0, 0
    67                              <1>  %define _func %1
    67                              <1>  %rep %0-1
    67                              <1>  %rotate -1
    67                              <1>  push %1
    67                              <1>  %endrep
    67                              <2>  %rotate -1
    67 00000042 6A00                <2>  push %1
    67                              <2>  %rotate -1
    67 00000044 6A00                <2>  push %1
    67                              <2>  %rotate -1
    67 00000046 6A20                <2>  push %1
    67                              <2>  %rotate -1
    67 00000048 56                  <2>  push %1
    67                              <2>  %rotate -1
    67 00000049 53                  <2>  push %1
    67 0000004A E8(00000000)        <1>  call _func
    68 0000004F 83EE20                  		sub esi, bookname
    69                                  		invoke WriteConsoleA, ebx, newline, 1, 0, 0
    69                              <1>  %define _func %1
    69                              <1>  %rep %0-1
    69                              <1>  %rotate -1
    69                              <1>  push %1
    69                              <1>  %endrep
    69                              <2>  %rotate -1
    69 00000052 6A00                <2>  push %1
    69                              <2>  %rotate -1
    69 00000054 6A00                <2>  push %1
    69                              <2>  %rotate -1
    69 00000056 6A01                <2>  push %1
    69                              <2>  %rotate -1
    69 00000058 68[18010000]        <2>  push %1
    69                              <2>  %rotate -1
    69 0000005D 53                  <2>  push %1
    69 0000005E E8(00000000)        <1>  call _func
    70 00000063 837E4200                		cmp dword[esi+next], 0
    71 00000067 7405                    		je .ext
    72 00000069 8B7642                  		mov esi, dword[esi+next]
    73 0000006C EBB3                    		jmp .cycle
    74                                  	.ext:
    75 0000006E 5B                      	pop ebx
    76 0000006F 58                      	pop eax
    77                                  	
    78                                  search_delete:
    79 00000070 50                      	push eax
    80 00000071 55                      	push ebp
    81 00000072 89E5                    	mov ebp, esp
    82 00000074 31C0                    	xor eax, eax
    83 00000076 BE[00000000]            	mov esi, head
    84 0000007B 8B4640                  	mov eax, dword[esi+year];
    85                                  	
    86                                  	listmove:
    87 0000007E 803E00                  		cmp byte[esi+author], 0 ; if first symbol of author is 0
    88 00000081 7406                    		je .delete
    89 00000083 807E2000                		cmp byte[esi+bookname], 0 ; and fs of bookname is 0
    90 00000087 7522                    		jne .checkyear
    91                                  		
    92                                  		.delete: ; delete 
    93 00000089 81FE[00000000]          		   cmp esi, head; if current != head
    94 0000008F 7510                    		   jne .delnext ; then work with stack
    95                                  		   ;else head will be next elem of list
    96 00000091 8B7E42                  		   mov edi, dword [esi+next]
    97 00000094 893D[00000000]          		   mov dword[head], edi
    98 0000009A 68[00000000]            		   push head
    99 0000009F EB1B                    		   jmp .step1np  	
   100                                  		   
   101                                  		.delnext:
   102 000000A1 5F                      		   pop edi; if it's not head pop prev element
   103 000000A2 8B4642                  		   mov eax, dword[esi+next] 
   104 000000A5 894742                  		   mov dword[edi+next], eax
   105 000000A8 56                      		   push esi
   106 000000A9 EB11                    		   jmp .step1np	   	   
   107                                  		;
   108                                  		.checkyear:
   109 000000AB 66817E400807            			cmp word[esi + year], year1
   110 000000B1 72D6                    			jb .delete
   111 000000B3 66817E40E407            			cmp word[esi + year], year2
   112 000000B9 77CE                    			ja .delete
   113                                  		
   114                                  		.step1withpush:
   115 000000BB 56                      		push esi ; save prev element
   116                                  		.step1np:
   117 000000BC 837E4200                		cmp dword[esi+next], 0 ; if test[i]==nullptr
   118 000000C0 7405                    		je .ext ; leave cycle
   119 000000C2 8B7642                  		mov esi, dword [esi+next] ; else eax = test[i].next
   120 000000C5 EBB7                    		jmp listmove
   121                                  		
   122                                  		
   123                                  		
   124                                  	.ext:
   125 000000C7 89EC                    		mov esp, ebp
   126 000000C9 5D                      		pop ebp
   127 000000CA 58                      		pop eax
   128 000000CB C3                      		ret
